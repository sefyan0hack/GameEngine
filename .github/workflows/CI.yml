name: ci
on: [push, pull_request, workflow_dispatch]

jobs:
  Build:
    name: "Build : ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}"
    if: "!contains(github.event.head_commit.message, '[skip CI]')"
    runs-on: ${{ matrix.os }}
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        compiler: [gcc, llvm, msvc]
        build_type: [Debug, Release]
        language: ['cpp']
        exclude:
          - os: ubuntu-latest
            compiler: msvc
    env:
      TEST_TIMEOUT: 60
      BUILD_DIR: build/${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
      APP_EXT: ${{ matrix.os == 'windows-latest' && '.exe' || '' }}
      TEST_EXEC: tests/tests${{ matrix.os == 'windows-latest' && '.exe' || '' }}
      IS_UBUNTU_LLVM: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'llvm') && matrix.build_type == 'Debug' }}
      IS_UBUNTU_GCC: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'gcc') && matrix.build_type == 'Debug' }}

    steps:
      - uses: actions/checkout@v3
      
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.BUILD_DIR }}
            ~/.cache/ccache
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-
            ${{ runner.os }}-${{ matrix.build_type }}-
            ${{ runner.os }}-

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true
          ninja: true
          vcpkg: false
          cppcheck: false
          choco: true
          tools: gdb
      - name: Install Dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == 'ubuntu-latest' ]]; then
            sudo apt-get update
            sudo apt-get install -y libgl1-mesa-dev libxi-dev gcovr
          elif [[ "${{ matrix.os }}" == 'windows-latest' ]]; then
          fi

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev mesa-common-dev libglu1-mesa-dev gdb

      - name: Configure CMake
        shell: bash
        run: |
          rm -rf "${{ env.BUILD_DIR }}"
          cmake -S . -B "$BUILD_DIR" -G  "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Initialize CodeQL
        if: ${{ env.IS_UBUNTU_LLVM == 'true' }}
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Build
        shell: bash
        run: cmake --build "${{ env.BUILD_DIR }}" --config ${{ matrix.build_type }} --parallel --target all

      - name: Perform CodeQL Analysis
        if: ${{ env.IS_UBUNTU_LLVM == 'true' }}
        uses: github/codeql-action/analyze@v3
        continue-on-error: true
        with:
          category: "/language:${{ matrix.language }}"

      - name: Upload Test Executable
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: ${{ env.BUILD_DIR }}/tests/tests${{ env.APP_EXT }}
          retention-days: 1

      - name: Test
        shell: bash
        run: ctest --test-dir "${{ env.BUILD_DIR }}" --output-on-failure --timeout ${{ env.TEST_TIMEOUT }}

      - name: Code Coverage
        if: ${{ env.IS_UBUNTU_GCC == 'true' }}
        shell: bash
        run: gcovr --exclude tests/ 3party/ --xml-pretty -o $BUILD_DIR/coverage.xml

      - name: SonarCloud Scan
        if: ${{ env.IS_UBUNTU_GCC == 'true' }}
        uses: SonarSource/sonarcloud-github-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scan-properties: |
            sonar.cfamily.build-wrapper-output=${{ env.BUILD_DIR }}/bw-output
            sonar.coverageReportPaths=${{ env.BUILD_DIR }}/coverage.
            sonar.cfamily.cache.enabled=true
            sonar.cfamily.cache.path=.sonar/cache
            sonar.scanner.metadataFilePath=${{ env.BUILD_DIR }}/sonar-report.txt