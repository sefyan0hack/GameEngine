name: Cross-Platform Build
on: [push, pull_request]

jobs:
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, llvm]
    container:
      image: aminya/setup-cpp-ubuntu:22.04
    steps:
      - uses: actions/checkout@v4
      - name: Verify Tools
        run: |
          cmake --version
          ninja --version
      - name: Build
        run: |
          mkdir -p build && cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build .

  windows-build:
    runs-on: windows-2022
    strategy:
      matrix:
        compiler: [gcc, msvc, llvm]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
          vcpkg: true
          vcvarsall: ${{ matrix.compiler == 'msvc' }}
      - name: Configure
        shell: bash
        run: |
          mkdir -p build && cd build
          cmake_flags=(
            -G Ninja
            -DCMAKE_BUILD_TYPE=Release
          )
          [[ "${{ matrix.compiler }}" = "llvm" ]] && cmake_flags+=(
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DCMAKE_CXX_FLAGS="-fms-compatibility-version=19.30"
          )
          cmake .. "${cmake_flags[@]}"
      - name: Build
        shell: bash
        run: cmake --build build --config Release
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            build/**
            ${{ env.VCPKG_ROOT }}/installed
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('CMakeLists.txt') }}