name: Cross-Platform Build

on: [push, pull_request]

jobs:
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, llvm]
    container:
      image: aminya/setup-cpp-ubuntu:22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up compiler
        run: |
          if [ "${{ matrix.compiler }}" = "llvm" ]; then
            export CC=clang
            export CXX=clang++
          else
            export CC=gcc
            export CXX=g++
          fi

      - name: Configure and Build
        run: |
          mkdir -p build && cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

  windows-build:
    runs-on: windows-2022
    strategy:
      matrix:
        compiler: [gcc, msvc, llvm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup C++ Tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
          vcpkg: true
          vcvarsall: ${{ matrix.compiler == 'msvc' }}

      - name: Install Windows OpenGL dependencies
        if: matrix.compiler != 'msvc'
        run: |
          vcpkg install opengl --triplet x64-windows

      - name: Configure and Build
        shell: bash
        run: |
          mkdir -p build && cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      - name: Cache vcpkg artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.VCPKG_ROOT }}/installed
            ${{ env.VCPKG_ROOT }}/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}