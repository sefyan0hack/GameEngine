#include <core/Material.hpp>
#include <core/Log.hpp>
#include <core/Shader.hpp>
#include <glm/glm.hpp>


Material::Material(Shader& vertex, Shader& fragment)
    : id(glCreateProgram())
{
    Shaders.vertex = &vertex;
    Shaders.fragment = &fragment;
    
    glAttachShader(id, Shaders.vertex->Getid());
    glAttachShader(id, Shaders.fragment->Getid());

    Link();
    checkProgramLinkStatus();
    Log::Info("Uniforms count is {}", UniformCount());
    DumpUniforms();
}

Material::~Material()
{
    glUseProgram(0);
    glDeleteProgram(id);
}

auto Material::Getid() const -> GLuint
{
    return id;
}

auto Material::Use() const -> void
{
    glUseProgram(id);
}

auto Material::Link() const -> void
{
    glLinkProgram(id);
}

auto Material::GetUniformLocation(const char *name) const -> GLuint
{
    auto it = Uniforms.find(name);
    
    if (it != Uniforms.end()){
        return it->second;
    }else{
        Log::Error("the Uniform {} not exist", name);
        return static_cast<GLuint>(-1);
    }
}

auto Material::GetUniformLocation_Prv(const char *name) const -> GLuint
{
    Use();
    // If not cached, query the location and cache it
    GLuint location = glGetUniformLocation(id, name);
    if (location == static_cast<GLuint>(-1)) {
        Log::Error("uniform {} doesn't exist!", std::string(name));
    }
    return location;
}

auto Material::checkProgramLinkStatus() const -> void
{
    GLint success;
    glGetProgramiv(id, GL_LINK_STATUS, &success);
    if (!success) {
        GLchar infoLog[512];
        glGetProgramInfoLog(id, 512, NULL, infoLog);
	    glDeleteProgram(id);
        Log::Error("PROGRAM LINKING_FAILED {}", infoLog);
    }
}
auto Material::UniformCount() const -> GLint
{
    GLint count;
    glGetProgramiv(id, GL_ACTIVE_UNIFORMS, &count);

    if(count == GL_INVALID_VALUE){
        Log::Error("program id is not a value generated by OpenGL.");
    }

    return count;
}

auto Material::DumpUniforms() -> void
{
    GLint max_len;
    glGetProgramiv(id, GL_ACTIVE_UNIFORM_MAX_LENGTH, &max_len);
    if(max_len == GL_INVALID_VALUE){
        Log::Error("program id is not a value generated by OpenGL.");
    }

    auto count = UniformCount();
    if(count != 0){

        Log::Info("the max name length is {}", max_len);

        GLsizei len;
        GLsizei count_out;
        GLenum type;

        for(GLint i = 0; i < count; i++){
            std::string Uniform_name(max_len, '\0');
            glGetActiveUniform(id, i, max_len, &len, &count_out, &type, Uniform_name.data());
            Uniform_name.resize(len);

            Uniforms[Uniform_name] =  GetUniformLocation_Prv(Uniform_name.c_str());

            Log::Info("- {} {};  {}", GlslTypes[type], Uniform_name, count_out);
        }
    }
}
///////
template<>
auto Material::SetUniform<GLint>(const std::string& name, const GLint &value) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform1i(it->second, value);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLfloat>(const std::string& name, const GLfloat &value) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform1f(it->second, value);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLuint>(const std::string& name, const GLuint &value) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform1ui(it->second, value);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
//
template<>
auto Material::SetUniform<glm::mat2>(const std::string& name, const glm::mat2 &value) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniformMatrix2fv(it->second, 1, GL_FALSE, &value[0][0]);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<glm::mat3>(const std::string& name, const glm::mat3 &value) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniformMatrix3fv(it->second, 1, GL_FALSE, &value[0][0]);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<glm::mat4>(const std::string& name, const glm::mat4 &value) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniformMatrix4fv(it->second, 1, GL_FALSE, &value[0][0]);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
///////

template<>
auto Material::SetUniform<GLint>(const std::string& name, const GLint &value1, const GLint &value2) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform2i(it->second, value1, value2);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLfloat>(const std::string& name, const GLfloat &value1, const GLfloat &value2) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform2f(it->second, value1, value2);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLuint>(const std::string& name, const GLuint &value1, const GLuint &value2) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform2ui(it->second, value1, value2);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
///////

template<>
auto Material::SetUniform<GLint>(const std::string& name, const GLint &value1, const GLint &value2, const GLint &value3) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform3i(it->second, value1, value2, value3);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLfloat>(const std::string& name, const GLfloat &value1, const GLfloat &value2, const GLfloat &value3) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform3f(it->second, value1, value2, value3);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLuint>(const std::string& name, const GLuint &value1, const GLuint &value2, const GLuint &value3) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform3ui(it->second, value1, value2, value3);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
///////

template<>
auto Material::SetUniform<GLint>(const std::string& name, const GLint &value1, const GLint &value2, const GLint &value3, const GLint &value4) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform4i(it->second, value1, value2, value3, value4);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLfloat>(const std::string& name, const GLfloat &value1, const GLfloat &value2, const GLfloat &value3, const GLfloat &value4) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform4f(it->second, value1, value2, value3, value4);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}
template<>
auto Material::SetUniform<GLuint>(const std::string& name, const GLuint &value1, const GLuint &value2, const GLuint &value3, const GLuint &value4) const -> void
{
    auto it = Uniforms.find(name);
    if (it != Uniforms.end()){
        glUniform4ui(it->second, value1, value2, value3, value4);
    }else{
        Log::Error("the Uniform {} not exist", name);
    }
}